#version 460

precision mediump float;

/**************************************************************
 * 🎛️ Inputs
 **************************************************************/

layout(local_size_x = 1, local_size_y = 1) in;

/**************************************************************
 * 🖼️ Outputs
 **************************************************************/

layout(rgba16f, binding = 0) uniform image2D outColor;

/**************************************************************
 * 👔 Uniforms
 **************************************************************/

layout(binding = 1) uniform FragUBO
{
    mat4 invProjectionView;
    float near;
    float far;
}
ubo;

/**************************************************************
 * 👋 Main
 **************************************************************/

struct Ray
{
  vec3 origin;
  vec3 direction;
};

void main()
{
    // 🟥 Pixel Coordinates
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(outColor); // fetch image dimensions

    // 🌄 Texture Coordinates
    vec2 texCoord = vec2(float(pixelCoords.x) / float(dims.x),
                         float(pixelCoords.y) / float(dims.y));

    // 🎥 Normalized Device Coordinates (NDC)
    vec2 ndc = (2.0 * texCoord - 1.0);
    float ndcDepth = ubo.far - ubo.near;
    float ndcSum = ubo.far + ubo.near;

    // 🌏 World Space Ray
    vec4 camRay = ubo.inverseViewProjection * vec4(ndc * ndcDepth, ndcSum, ndcDepth);
    vec4 camOrigin = ubo.inverseViewProjection * vec4( ndc, -1.0, 1.0 );

    // 🧪 Test ray with scene...
    Ray ray;
    ray.origin = camOrigin;
    ray.direction = normalize(camRay).xyz;
    //vec4 radiance = calculateRadiance(ray);

    // ✍ Write to final color output
    imageStore(outColor, pixelCoords, radiance);
}